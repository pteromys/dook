{
  "rust": {
    "match_patterns": [
      [
        "[",
        "  (function_item name: (_) @name)",
        "  (function_signature_item name: (_) @name)",
        "  (let_declaration pattern: [",
        "    (identifier) @name",
        "  ])",
        "  (const_item name: (_) @name)",
        "  (enum_item name: (_) @name)",
        "  (impl_item type: (_) @name)",
        "  (impl_item trait: (_) @name)",
        "  (impl_item trait: (generic_type type: (_) @name))",
        "  (impl_item trait: (generic_type type: (scoped_identifier name: (_) @name)))",
        "  (impl_item trait: (generic_type type: (scoped_type_identifier name: (_) @name)))",
        "  (impl_item trait: (scoped_type_identifier name: (_) @name))",
        "  (macro_definition name: (_) @name)",
        "  (mod_item name: (_) @name)",
        "  (static_item name: (_) @name)",
        "  (struct_item name: (_) @name)",
        "  (trait_item name: (_) @name)",
        "  (type_item name: (_) @name)",
        "  (union_item name: (_) @name)",
        "] @def"
      ]
    ],
    "sibling_patterns": [
      "line_comment",
      "block_comment",
      "attribute_item"
    ],
    "parent_patterns": [
      "function_item",
      "impl_item"
    ],
    "parent_exclusions": [
      "body"
    ]
  },
  "python": {
    "match_patterns": [
      [
        "[",
        "  (class_definition name: (_) @name) @def",
        "  (function_definition name: (_) @name) @def",
        "  (decorated_definition (class_definition name: (_) @name)) @def",
        "  (decorated_definition (function_definition name: (_) @name)) @def",
        "  (expression_statement (assignment left: (_) @name)) @def",
        "  (expression_statement (assignment left: (attribute attribute: (_) @name))) @def",
        "  (expression_statement (assignment left: (subscript subscript: (string (string_content) @name)))) @def",
        "  (dictionary (pair key: (string (string_content) @name)) @def)",
        "  (parameters (identifier) @name @def)",
        "  (lambda_parameters (identifier) @name @def)",
        "  (typed_parameter . (identifier) @name) @def",
        "  (default_parameter name: (_) @name) @def",
        "  (typed_default_parameter name: (_) @name) @def",
        "]"
      ]
    ],
    "recurse_patterns": [
      [
        "[",
        "  (call function: (identifier) @name)",
        "  (call function: (attribute attribute: (identifier) @name))",
        "]"
      ]
    ],
    "sibling_patterns": [
      "decorator",
      "comment"
    ],
    "parent_patterns": [
      "class_definition",
      "function_definition",
      "assignment"
    ],
    "parent_exclusions": [
      "body",
      "right"
    ]
  },
  "js": {
    "match_patterns": [
      [
        "[",
        "  (variable_declarator name: (_) @name)",
        "  (function_declaration name: (_) @name)",
        "  (function_expression name: (_) @name)",
        "  (method_definition name: (_) @name)",
        "  (formal_parameters (identifier) @name)",
        "  (class_declaration name: (_) @name)",
        "  (field_definition property: (_) @name)",
        "  (assignment_expression left: (_) @name)",
        "  (assignment_expression left: (member_expression property: (_) @name))",
        "  (assignment_expression left: (member_expression object: (_) @name property: ((property_identifier) @prototype (#eq? @prototype \"prototype\"))))",
        "  (assignment_expression left: (member_expression object: (member_expression object: (_) @name property: ((property_identifier) @prototype (#eq? @prototype \"prototype\")))))",
        "  (pair key: (property_identifier) @name)",
        "  (pair key: (string (string_fragment) @name))",
        "] @def"
      ]
    ],
    "sibling_patterns": [
      "comment"
    ],
    "parent_patterns": [
      "function_declaration",
      "function_expression",
      "method_definition",
      "class_declaration"
    ],
    "parent_exclusions": [
      "body"
    ]
  },
  "ts": {
    "match_patterns": [
      [
        "[",
        "  (function_signature name: (_) @name)",
        "  (function_declaration name: (_) @name)",
        "  (method_signature name: (_) @name)",
        "  (method_definition name: (_) @name)",
        "  (abstract_method_signature name: (_) @name)",
        "  (abstract_class_declaration name: (_) @name)",
        "  (module name: (_) @name)",
        "  (variable_declarator name: (_) @name)",
        "  (assignment_expression left: (_) @name)",
        "  (assignment_expression left: (member_expression property: (property_identifier) @name))",
        "  (assignment_expression left: (member_expression object: (_) @name property: ((property_identifier) @prototype (#eq? @prototype \"prototype\"))))",
        "  (assignment_expression left: (member_expression object: (member_expression object: (_) @name property: ((property_identifier) @prototype (#eq? @prototype \"prototype\")))))",
        "  (class_declaration name: (_) @name)",
        "  (type_alias_declaration name: (_) @name)",
        "  (interface_declaration name: (_) @name)",
        "  (enum_declaration name: (_) @name)",
        "  (enum_assignment name: (_) @name)",
        "  (_ key: (property_identifier) @name value: (_))",
        "  (_ key: (property_identifier) @name type: (_))",
        "  (_ key: (string (string_fragment) @name) value: (_))",
        "  (_ key: (string (string_fragment) @name) type: (_))",
        "  (property_signature (property_identifier) @name)",
        "  (public_field_definition name: (property_identifier) @name)",
        "  (import_statement (import_clause (named_imports (import_specifier alias: (_) @name))))",
        "  (export_statement (export_clause (export_specifier alias: (_) @name)))",
        "] @def"
      ],
      [
        "(enum_body (property_identifier) @name @def)"
      ]
    ],
    "sibling_patterns": [
      "comment"
    ],
    "parent_patterns": [
      "function_declaration",
      "method_definition",
      "class_declaration",
      "type_alias_declaration",
      "interface_declaration",
      "enum_declaration",
      "property_signature",
      "pair"
    ],
    "parent_exclusions": [
      "body",
      "value",
      "type"
    ]
  },
  "tsx": {
    "match_patterns": [
      [
        "[",
        "  (function_signature name: (_) @name)",
        "  (function_declaration name: (_) @name)",
        "  (method_signature name: (_) @name)",
        "  (method_definition name: (_) @name)",
        "  (abstract_method_signature name: (_) @name)",
        "  (abstract_class_declaration name: (_) @name)",
        "  (module name: (_) @name)",
        "  (variable_declarator name: (_) @name)",
        "  (assignment_expression left: (_) @name)",
        "  (assignment_expression left: (member_expression property: (property_identifier) @name))",
        "  (assignment_expression left: (member_expression object: (_) @name property: ((property_identifier) @prototype (#eq? @prototype \"prototype\"))))",
        "  (assignment_expression left: (member_expression object: (member_expression object: (_) @name property: ((property_identifier) @prototype (#eq? @prototype \"prototype\")))))",
        "  (class_declaration name: (_) @name)",
        "  (type_alias_declaration name: (_) @name)",
        "  (interface_declaration name: (_) @name)",
        "  (enum_declaration name: (_) @name)",
        "  (enum_assignment name: (_) @name)",
        "  (_ key: (property_identifier) @name value: (_))",
        "  (_ key: (property_identifier) @name type: (_))",
        "  (_ key: (string (string_fragment) @name) value: (_))",
        "  (_ key: (string (string_fragment) @name) type: (_))",
        "  (jsx_attribute (property_identifier) @name)",
        "  (property_signature (property_identifier) @name)",
        "  (public_field_definition name: (property_identifier) @name)",
        "  (import_statement (import_clause (named_imports (import_specifier alias: (_) @name))))",
        "  (export_statement (export_clause (export_specifier alias: (_) @name)))",
        "] @def"
      ],
      [
        "(enum_body (property_identifier) @name @def)"
      ]
    ],
    "sibling_patterns": [
      "comment"
    ],
    "parent_patterns": [
      "function_declaration",
      "method_definition",
      "class_declaration",
      "type_alias_declaration",
      "interface_declaration",
      "enum_declaration",
      "property_signature",
      "pair",
      "jsx_opening_element"
    ],
    "parent_exclusions": [
      "body",
      "value",
      "type"
    ]
  },
  "go": {
    "match_patterns": [
      [
        "[",
        "  (type_spec name: (_) @name)",
        "  (function_declaration name: (_) @name)",
        "  (method_declaration name: (_) @name)",
        "  (field_declaration name: (_) @name)",
        "  (parameter_declaration name: (_) @name)",
        "  (assignment_statement left: (_) @name)",
        "] @def"
      ]
    ],
    "sibling_patterns": [
      "comment"
    ],
    "parent_patterns": [
      "type_spec",
      "function_declaration",
      "method_declaration"
    ],
    "parent_exclusions": [
      "body",
      "type"
    ]
  },
  "c": {
    "match_patterns": [
      [
        "[",
        "  (preproc_def name: (_) @name)",
        "  (preproc_function_def name: (_) @name)",
        "  (struct_specifier name: (_) @name body: (_))",
        "  (type_definition type: (struct_specifier name: (_) @name body: (_)))",
        "  (type_definition \"typedef\" type: (_) (type_identifier) @name)",
        "  (type_definition \"typedef\" type: (_) (pointer_declarator) @name)",
        "  (type_definition \"typedef\" type: (_) (pointer_declarator declarator: (_) @name))",
        "  (field_declaration declarator: (_) @name)",
        "  (field_declaration declarator: (pointer_declarator declarator: (_) @name))",
        "  (field_declaration declarator: (pointer_declarator declarator: (pointer_declarator declarator: (_) @name)))",
        "  (field_declaration declarator: (pointer_declarator declarator: (pointer_declarator declarator: (pointer_declarator declarator: (_) @name))))",
        "  (field_declaration declarator: (pointer_declarator declarator: (pointer_declarator declarator: (pointer_declarator declarator: (pointer_declarator declarator: (_) @name)))))",
        "  (function_declarator declarator: (_) @name)",
        "  (function_definition (function_declarator declarator: (_) @name))",
        "  (function_definition (pointer_declarator declarator: (function_declarator declarator: (_) @name)))",
        "  (function_definition (pointer_declarator declarator: (pointer_declarator declarator: (function_declarator declarator: (_) @name))))",
        "  (function_definition (pointer_declarator declarator: (pointer_declarator declarator: (pointer_declarator declarator: (function_declarator declarator: (_) @name)))))",
        "  (_ declarator: (identifier) @name)",
        "  (_ declarator: (field_identifier) @name)",
        "  (_ declarator: (type_identifier) @name)",
        "] @def"
      ]
    ],
    "sibling_patterns": [
      "comment"
    ],
    "parent_patterns": [
      "type_definition",
      "function_declarator",
      "struct_specifier"
    ],
    "parent_exclusions": [
      "body",
      "type"
    ]
  },
  "cplusplus": {
    "match_patterns": [
      [
        "[",
        "  (preproc_def name: (_) @name)",
        "  (function_declarator declarator: (_) @name)",
        "  (function_definition declarator: (_ declarator: (_) @name))",
        "  (function_definition declarator: (_ declarator: (qualified_identifier (\"::\" (_) @name))))",
        "  (function_definition declarator: (_ declarator: (qualified_identifier (qualified_identifier (\"::\" (_) @name)))))",
        "  (function_definition declarator: (_ declarator: (template_function name: (_) @name)))",
        "  (struct_specifier name: (_) @name)",
        "  (_ declarator: (identifier) @name)",
        "  (_ declarator: (field_identifier) @name)",
        "  (_ declarator: (type_identifier) @name)",
        "  (_ declarator: (template_function) @name)",
        "  (_ declarator: (template_function name: (_) @name))",
        "  (namespace_definition name: (_) @name)",
        "  (type_parameter_declaration (type_identifier) @name)",
        "  (class_specifier (type_identifier) @name)",
        "  (field_initializer (field_identifier) @name)",
        "  (assignment_expression left: (_) @name)",
        "  (assignment_expression left: (field_expression field: (_) @name))",
        "] @def"
      ]
    ],
    "sibling_patterns": [
      "comment",
      "template_parameter_list"
    ],
    "parent_patterns": [
      "namespace_definition",
      "type_definition",
      "function_declarator",
      "function_definition",
      "struct_specifier",
      "class_specifier"
    ],
    "parent_exclusions": [
      "body",
      "type"
    ]
  }
}
